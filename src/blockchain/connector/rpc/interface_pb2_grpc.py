# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import interface_pb2 as interface__pb2


class ConsensusStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.Upload_batch = channel.unary_unary(
            '/Consensus/Upload_batch',
            request_serializer=interface__pb2.Batch.SerializeToString,
            response_deserializer=interface__pb2.Result.FromString,
        )
        self.Train = channel.unary_unary(
            '/Consensus/Train',
            request_serializer=interface__pb2.Training_request.SerializeToString,
            response_deserializer=interface__pb2.Result.FromString,
        )
        self.Fetch_training_result = channel.unary_unary(
            '/Consensus/Fetch_training_result',
            request_serializer=interface__pb2.Fetch_training_result_request.SerializeToString,
            response_deserializer=interface__pb2.Result.FromString,
        )
        self.Make_consensus = channel.unary_unary(
            '/Consensus/Make_consensus',
            request_serializer=interface__pb2.Proposal.SerializeToString,
            response_deserializer=interface__pb2.Result.FromString,
        )


class ConsensusServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def Upload_batch(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Train(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fetch_training_result(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Make_consensus(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConsensusServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Upload_batch': grpc.unary_unary_rpc_method_handler(
            servicer.Upload_batch,
            request_deserializer=interface__pb2.Batch.FromString,
            response_serializer=interface__pb2.Result.SerializeToString,
        ),
        'Train': grpc.unary_unary_rpc_method_handler(
            servicer.Train,
            request_deserializer=interface__pb2.Training_request.FromString,
            response_serializer=interface__pb2.Result.SerializeToString,
        ),
        'Fetch_training_result': grpc.unary_unary_rpc_method_handler(
            servicer.Fetch_training_result,
            request_deserializer=interface__pb2.Fetch_training_result_request.FromString,
            response_serializer=interface__pb2.Result.SerializeToString,
        ),
        'Make_consensus': grpc.unary_unary_rpc_method_handler(
            servicer.Make_consensus,
            request_deserializer=interface__pb2.Proposal.FromString,
            response_serializer=interface__pb2.Result.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Consensus', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
